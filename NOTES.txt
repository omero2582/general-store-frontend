RTK Query-
-cache time starts counting down, only after a query loses all of its
subscribers. Once it finishes counting, it clears it from the cache
-you can use multiple query hook calls, and it will not refetch a new
call and will just use the previous one. This property is called 'keepUnusedDataFor'

with above in mind, we can call 'useMeQuery()' at the outermost component
when the app loads, and then check this same status by including the same
hook call in innner components

keepUnusedDataFor <- defaults to 60s = time the data will remain in the cache, 
after last component referencing it umounts. Also available per endpoint
refetchOnMountOrArgChange <- defaults to false = can be set to true or a number
in seconds. If set to a number, it compares the current time to the last time the 
cached data was fetched, and if enough time has passed, then it refetches.
Pretty sure its the same as staleTime in Tanstack Query 


// RTK QUERY cahce
https://redux-toolkit.js.org/rtk-query/usage/automated-refetching

// SVGs
switched to using vite-plugin-svgr for SVGs. This lets us easily
import svgs as react components, so that we can change the svg's colors
from the JSX. Some SVGs might need their contents inside the file
changed to 'fill=currentColor'

TO SOLVE:
edit route
google image rate limits
support multiple images frontend (backend support this)